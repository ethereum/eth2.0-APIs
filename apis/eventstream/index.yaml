get:
  operationId: "eventstream"
  summary: Subscribe to beacon node events
  tags:
    - Events
    - ValidatorRequiredApi
  description: |
    Provides endpoint to subscribe to beacon node Server-Sent-Events stream.
    Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)
    implementation to listen on those events.
  parameters:
    - name: topics
      in: query
      required: true
      description: Event types to subscribe to
      schema:
        type: array
        items:
          type: string
          uniqueItems: true
          enum:
            - state
            - block
            - attestation
            - voluntary_exit
            - finalized_checkpoint
  responses:
    "200":
      description: Opened SSE stream.
      content:
        text/event-stream:
          schema:
            type: string
            description: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format
          examples:
            state:
              description: |
                The node has updated its state.  This event will be sent in three situations:

                - a node has received a block, and updated state accordingly
                - a node has _not_ received a block four seconds after the start of the slot, and updated state accordingly
                - a node has carried out a chain reorganization, and updated state accordingly

                The fields returned in the data for this event are:

                  - **slot** the current slot as understood by the node
                  - **block** the block root of the chain head as understood by the node
                  - **state** the state root as understood by the node
                  - **distance** the number of slots between the slot of the chain head and the current slot as understood by the node
                  - **epoch_transition** _true_ if the slot marks the first slot in an epoch, otherwise _false_
                  - **reorg** _true_ if the state has updated due to a reorganization, otherwise _false_
                  - **reorg_distance** the number of slots between the slot of the block that caused a reorganization and the current slot as understood by the node

                On receipt of this event a client can query the node for information about the given state using the provided state root.

                Note that it is possible to receive multiple events for the same slot, when multiple situations as above occur within a single slot.  It is also possible to receive events for slots that are not the current slot, for example if the node is syncing.  The user should compare information about the slot returned by this event with the expected slot
              value: |
                event: state
                data: {"slot": "10", "block": "0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf", "state":"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9", "distance: "0", "epoch_transition": false, "reorg": false, "reorg_distance:" "0"}
            block:
              description: The node has received a valid block (from P2P or API)
              value: |
                event: block\n
                data: "{\"slot\": \"10\", \"block\": \"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\"}"\n
                \n
            attestation:
              description: The node has received a valid attestation (from P2P or API)
              value: |
                event: attestation\n
                data: "{\n      \"aggregation_bits\": \"0x01\",\n      \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\n      \"data\": {\n        \"slot\": \"1\",\n        \"index\": \"1\",\n        \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"source\": {\n          \"epoch\": \"1\",\n          \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"\n        },\n        \"target\": {\n          \"epoch\": \"1\",\n          \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"\n        }\n      }\n    }"\n
                \n
            voluntary_exit:
              description: The node has received a valid voluntary exit (from P2P or API)
              value: |
                event: voluntary_exit\n
                data: "{\n      \"message\": {\n        \"epoch\": \"1\",\n        \"validator_index\": \"1\"\n      },\n      \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n    }"\n
                \n
            finalized_checkpoint:
              description: Finalized checkpoint has been updated
              value: |
                event: finalized_checkpoint\n
                data: "{\"block\":\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\", \"state\": \"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\", \"epoch\": \"2\" }"\n
                \n
    "400":
      description: "The topics supplied could not be parsed"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "../../beacon-node-oapi.yaml#/components/schemas/ErrorMessage"
              - example:
                  code: 400
                  message: "Invalid topic: weather_forecast"
    "500":
      $ref: '../../beacon-node-oapi.yaml#/components/responses/InternalError'
      
