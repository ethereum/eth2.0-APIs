# API specific types

ValidatorResponse:
  type: object
  properties:
    index:
      allOf:
        - $ref: './primitive.yaml#/Uint64'
        - description: "Index of validator in validator registry."
    balance:
      allOf:
        - $ref: "./primitive.yaml#/Gwei"
        - description: "Current validator balance in gwei."
    status:
      $ref: "#/ValidatorStatus"
    validator:
      $ref: "./validator.yaml#/Validator"

ValidatorBalanceResponse:
  type: object
  properties:
    index:
      allOf:
        - $ref: './primitive.yaml#/Uint64'
        - description: "Index of validator in validator registry."
    balance:
      allOf:
        - $ref: "./primitive.yaml#/Gwei"
        - description: "Current validator balance in gwei."

ValidatorStatus:
  description: |
    Possible statuses:
    - **waiting_for_eligibility** - A `Deposit` is included in a `BeaconBlock`, causing the Beacon Chain to become aware of the validator.
    - **waiting_for_finality** - The Beacon Chain has observed that the validator could become eligible and it is waiting for those conditions 
    to become finalized.
    - **waiting_in_queue** - The conditions which allow the validator to become active are finalized.
    The validator is now waiting in the activation queue, awaiting its turn to be activated.
    - **standby_for_active** - The conditions which allow the validator to become active are finalized.
    The validator is now waiting in the activation queue, awaiting its turn to be activated.
    Validator status will change to `active` on `validator.activation_epoch`.
    - **active** - The validator is now active and, for the first time, is rewarded for including attestations and blocks in the beacon chain.
     It will be penalized if it fails to have attestations included in the chain.
    - **active_awaiting_slashed_exit** - The validator has produced conflicting messages and they have been included
     in the chain via a ProposerSlashing or AttesterSlashing. It will not be rewarded for producing attestations but may be 
     required to (and rewarded for) producing blocks. Validator will change status to `exited_slashed` on `validator.exit_epoch`.
    - **active_awaiting_voluntary_exit** - The validator has voluntarily started exiting. As with the active state, the
    validator will be rewarded for including attestations and blocks in the chain
    and penalized for failing to include attestations. Validator will change status to `exited_voluntarily` on `validator.exit_epoch`.
    - **exited_voluntarily** - The validator has exited and is no longer permitted to include attestations or
    blocks in the beacon chain. Validator will change status to `withdrawable` on `validator.withdrawable_epoch`.
    - **exited_slashed** - The validator has exited and is no longer permitted to include attestations or
    blocks in the beacon chain. Validator will change status to `withdrawable` on `validator.withdrawable_epoch`.
    - **withdrawable** - The validator has exited and waited long enough to be withdrawable.

    [More indepth validator status specification](https://hackmd.io/bQxMDRt1RbS1TLno8K4NPg)
  enum: ["waiting_for_eligibility", "waiting_for_finality", "waiting_in_queue", "standby_for_active", "active", "active_awaiting_slashed_exit", "active_awaiting_voluntary_exit", "exited_voluntarily", "exited_slashed", "withdrawable"]
  example: "active"


Committee:
  description: Group of validators assigned to attest at specific slot and that have the same committee index (shard in phase 1)
  type: object
  properties:
    index:
      allOf:
        - $ref: './primitive.yaml#/Uint64'
        - description: Committee index at a slot
    slot:
      $ref: './primitive.yaml#/Uint64'

    validators:
      type: array
      description: "List of validator indices assigned to this committee"
      items:
        $ref: './primitive.yaml#/Uint64'
